import socket
import os
import sys

HOST = "localhost"
PORT = 2000
BUFFER = 1024
CMD_SIZE = 4
data = None
USER = "e"
PASS = "e"

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((HOST, PORT))
server.listen(1)

client, addr = server.accept()
print(addr)

# Function to authenticate between client and server
def authenticate():
    # Initial exchange
    client.send("1".encode())

    # Receive username from client
    username = client.recv(1024)
    client.send("1".encode())
    
    # Receive password from client
    password = client.recv(1024)

    # If the username and password are correct, set atatus to 1; set it to 0 otherwise
    if username.decode() == USER and password.decode() == PASS:
        status = "1"
    else:
        status = "0"
    # Send the status to the client and confirm receipt
    client.send(status.encode())
    client.recv(1)
    return

def send():
    print("Ready to receive file.")
    # Initial exchange
    client.send("1".encode())

    # Receive the filepath from the client and decode it
    filename = client.recv(BUFFER)
    filename = isolate_file_name(filename.decode())

    # Notify the server that the file name has been processed
    client.send("1".encode())

    # Receive the size of the file from the server
    file_size = int(client.recv(BUFFER).decode())

    # Open the file for writing
    file = open("./files/"+filename, "wb")
    received_bytes = 0

    # Signal that the server is ready to receive information
    client.send("1".encode())
    # While the server still has data left to process
    while received_bytes < file_size:
        # Receive the data from the server
        info = client.recv(BUFFER)
        # Write the data to the file
        file.write(info)
        # Increment the amount of data that has been read
        received_bytes += BUFFER
        # Signal to the client that the next data block can be read
        client.send("1".encode()) 
    # When there is no more data, close the file and await the client's confirmation
    file.close()
    client.recv(1)

    # Reply to the confirmation and return
    client.send("1".encode())
    return

def receive():
    print("Ready to send file")
    # Initial exchange
    client.send("1".encode())

    # Receive file name and send file size
    filename = client.recv(BUFFER)
    file_size = os.path.getsize(os.getcwd()+"/files/"+filename.decode())
    client.send(str(file_size).encode())

    # Wait for confirmation that the client is ready for data transfer
    client.recv(1)

    # Open the file for reading and read the first bit of data
    file = open("./files/"+filename.decode(), "rb")
    data = file.read(BUFFER)
    print(data)
    # Loop while there is data to transfer
    while data:
        # Send data to the client
        client.send(data)
        # Wait for the client to process all of their data
        client.recv(1)
        # Read the next bit of data
        data = file.read(BUFFER)
        print(data)

    # Close the file
    file.close()
    # Signal that the server is done transferring
    client.send("1".encode())
    os.remove("./files/"+filename.decode())
    return

# Function to list send the contents of a directory to the client
def list_directory():
    print("Ready to list directory contents")
    client.send("1".encode())
    client.recv(1)
    string = create_directory_string()
    print(string)
    client.send(string.encode())
    print("Sent list!")
    client.recv(1)
    return

# Function to close down the server
def exit():
    client.close()
    server.close()
    return

# Function to create a list of the files in a directory in string format
def create_directory_string():
    file_list = os.listdir("./files")
    list_string = ""
    for item in file_list:
        list_string += item
        list_string += ","
    return list_string

# Function to isolate the name of the file from a file path
def isolate_file_name(filepath):
    path_list = filepath.split("/")
    return path_list[len(path_list) - 1]

while True:
    data = client.recv(CMD_SIZE).decode()
    if data == "AUTH":
        authenticate()
    elif data == "SEND":
        send()
    elif data == "RECV":
        receive()
    elif data == "LIST":
        list_directory()
    elif data == "EXIT":
        exit()
        break

    data = None
