from cryptography.fernet import Fernet
import hashlib
from cryptographic_components import *
import base64

# SETUP CODE
# Initialize test values and a test key for the Fernet engine
test_data_0 = "Here's some data to encrypt!".encode()
test_data_1 = "This is another set of data to encrypt!".encode()
test_key = "7IpGDicXFjJ8y69W4J1WexT17uzxrK9fVzyk0RcjBuk=".encode()

# Initialize the Fernet engine to perform encryption and decryption
crypt_engine = Fernet(test_key)

# TAG TESTS
# Test that the tagging function produces a correct tag
def test_tag_generation():
    assert str(tag_data(test_data_0)) == "69d8a949c99834fadc6a389ba1032a779f6f7973d7ac71b52937b65eed015c19"

# Test that the validation function recognizes a valid tag
def test_tag_validation_success():
    assert validate_tag(test_data_0, "69d8a949c99834fadc6a389ba1032a779f6f7973d7ac71b52937b65eed015c19")

# Test that the validation function recognizes an invalid tag
def test_tag_validation_failure():
    assert not validate_tag(test_data_0, "8671a0fe8ced3157583a69289b691d028370231800d35fa24240e17f3e010aa8")

# ENCRYPTION TESTS
# Testing the results of encryption with Fernet is tricky, as the body of the ciphertext
# changes between encryptions due to the IV supplied by the AES engine that Fernet uses.
# This non-deterministic quality means that we can't confirm an expected output of the
# encryption process to ensure that it encrypted correctly. With that in mind, the
# one thing that we can do to check if the generation process was successful is to check
# the version field given by the ciphertext as detailed in https://github.com/fernet/spec/blob/master/Spec.md
# We confirm that the initial value of the ciphertext is appropriate to give us a reasonable
# degree of confidence that the ciphertext was generated correctly.

# Test that a result is generated by the function call
def test_encrypt_data_succeeds():
    assert encrypt_data(test_data_0, crypt_engine)

# Test that the encrypted result has the correct initial value
def test_encrypt_data_yields_valid_indicator():
    assert base64.urlsafe_b64decode(encrypt_data(test_data_0, crypt_engine))[0] == 128

# DECRYPTION TESTS
# Test that the decryption function returns the correct result
def test_decrypt_data_succeeds():
    enc_data = encrypt_data(test_data_1, crypt_engine)
    dec_data = decrypt_data(enc_data, crypt_engine)
    assert dec_data == test_data_1
